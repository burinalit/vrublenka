<?php

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 * 13.02.2017
 */
class WtGtPostVisibilityMetaBox {
	private $screens = array(
		'post'
	);

	private $fields = array(
		'visibility_location' => array(
			'id' => 'visibility_location',
			'label' => 'Локации',
			'description' => "Выделите необходимые города",
			'type' => 'checkbox-group',
			'values' => array(),

		),
	);

	/**
	 * Class construct method. Adds actions to their respective WordPress hooks.
	 */
	public function __construct() {
		// Регистрация скриптов для админки
		add_action('admin_enqueue_scripts', array($this, 'registerAdminScripts'));

		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		add_action( 'save_post', array( $this, 'save_post' ), 10, 2);

		$this->screens = Wt::$obj->post->getSettingArray('support_select_region');
	}

	public function registerAdminScripts(){
		wp_register_script(
			'admin-post-edit-location',
			plugin_dir_url(WT_GT_PRO_PLUGIN_FILE) . '/js/admin-post-edit.js',
			array('jquery'),
			'1.0.0'
		);
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'visibility-metabox',
				__('Настройка видимости', 'visibility-metabox'),
				array($this, 'add_meta_box_callback'),
				$screen,
				'side',
				'core'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 *
	 * @param object $post WordPress post object
	 */
	public function add_meta_box_callback( $post ) {
		wp_enqueue_script('checkboxes');
		wp_enqueue_script('admin-post-edit-location');

		wp_nonce_field( 'wt_data', 'wt_nonce' );
		echo 'Определите область видимости для отображения контента.';
		$this->generate_fields( $post );
	}

	/**
	 * Generates the field's HTML for the meta box.
	 */
	public function generate_fields( $post ) {
		$this->fields['visibility_location']['values'] = Wt::$obj->contacts->getRegionsArray();
		$post_meta_visibility_locations = get_post_meta( $post->ID, 'visibility_location_id');

		$output = '';
		foreach ( $this->fields as $field ) {
			$label = '<strong><label for="' . $field['id'] . '">' . $field['label'] . '</label></strong>';

			$input = '<a href="#'.$field['id'].'_checkbox_group" class="btn btn-primary" data-toggle="checkboxes" data-action="check">Выбрать все</a>
				<a href="#'.$field['id'].'_checkbox_group" class="btn btn-link" data-toggle="checkboxes" data-action="uncheck">Очистить</a></br>
				<div id="'.$field['id'].'_checkbox_group" class="" style="height: 300px; overflow: overlay;">';

			foreach ( $field['values'] as $key => $value ) {
				$input .= sprintf(
					'<input type="checkbox" name="%s[]" value="%s" %s/>%s<br />',
					$field['id'],
					$key,
					in_array($key, $post_meta_visibility_locations)? ' checked="checked"' : '',
					$value
				);
			}
			$input .= '</div>';

			$output .= '<p>' . $label . '<br>' . $input . '</p>';
		}
		echo $output;
	}

	/**
	 * Hooks into WordPress' save_post function
	 */
	public function save_post($post_id, $post) {
		$prefix = 'wt_';

		if (!isset( $_POST['wt_nonce'])) return $post_id;

		$nonce = $_POST['wt_nonce'];
		if ( !wp_verify_nonce( $nonce, 'wt_data' ) )
			return $post_id;

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
			return $post_id;

		foreach ( $this->fields as $field ) {
			if ( isset( $_POST[ $field['id'] ] ) ) {
				$value = $_POST[ $field['id'] ];
				switch ( $field['type'] ) {
					case 'email':
						$value = sanitize_email($value);
						break;
					case 'text':
						$value = sanitize_text_field($value);
						break;
					case 'checkbox-group':
						if (is_array($value)) $value = implode(",", $value);
						break;
				}
				update_post_meta($post_id, $prefix . $field['id'], $value);
			} else if ( $field['type'] === 'checkbox' ||  $field['type'] === 'checkbox-group') {
				update_post_meta($post_id, $prefix . $field['id'], '0');
			}
		}


		// Сохраняем связи локаций с публикацией

		$post_status = $post->post_status;

		$visibility_locations = $_POST['visibility_location'];
		$visibility_location_id = get_metadata('post', $post_id, 'visibility_location_id');


		$locations = Wt::$obj->contacts->getRegionsArray();
		if (!is_array($visibility_locations) || !is_array($locations)) return;


		foreach ($locations as $key => $value){
			if (in_array($key, $visibility_locations) && $post_status == 'publish')
			{
				// Проверяем наличие связи с локацией и в случае отсутствия создаём
				if (in_array($key, $visibility_location_id)) continue;
				else add_metadata('post', $post_id, 'visibility_location_id', $key);
			}
			else
				delete_metadata('post', $post_id, 'visibility_location_id', $key);
		}
	}
}
?>